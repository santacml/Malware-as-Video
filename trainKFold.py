import pickle, gzip, glob, sys, keras, os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # gets rid of AVX message
import random as rn
import numpy as np
import tensorflow as tf
os.environ['PYTHONHASHSEED'] = '0'
np.random.seed(37)
rn.seed(1254)
tf.set_random_seed(89)
from keras import optimizers
from keras import backend as K
from keras.models import load_model
from keras.layers import *
from keras.models import Sequential
from keras.losses import weighted_categorical_crossentropy
from keras.callbacks import CSVLogger, ModelCheckpoint
from keras.regularizers import *
from keras.utils.generic_utils import get_custom_objects
from keras.layers.advanced_activations import LeakyReLU, ELU
sys.path.insert(0, r'.\libraries')
from kerasLayers import *
from kerasExtras import *
elu = ELU(1)
elu.__name__ = "ELU"



# input_length = None
# line_length = 18
# num_samples = 5000
# num_samples_valid = 2500

#nopad kaggle
input_length = None
line_length = 25
# num_samples = 8000
# num_samples_valid = 2375

# standard input
# train_gen = loadDataGenerator(r".\libraries\datasets\kaggle\trainASM_all_nopad_pooled.pklz", num_samples)
# valid_gen = loadDataGenerator(r".\libraries\datasets\kaggle\validASM_all_nopad_pooled.pklz", num_samples_valid)

k = 10
allSamples = loadAllAndShuffle(r".\libraries\datasets\kaggle\trainASM_all_nopad_pooled.pklz", 
                               r".\libraries\datasets\kaggle\validASM_all_nopad_pooled.pklz")
folds = loadDataGeneratorKFold(allSamples, k=k)
# print([len(fold) for fold in folds])
foldLength = len(folds[0])

print("writing folds for backup")
for n in range(0, k):
    writeMe = gzip.open(r"./networks/kfold_foldset_" + str(n) + r".pklz", 'w+b')
    pickle.dump(folds[n], writeMe)


# define variables
# batch_size = 1
steps_per_epoch = (foldLength*(k-1))/batch_size
valid_steps = foldLength/batch_size  # should be this
epochs = 30


def listGenerator(samples):
    while True:
        for n in range(0, len(samples)):
            yield samples[n]




from model_builder import build_model

for n in range(0, k):
    # god I love python
    trainFolds = folds[:n] + folds[n+1:]
    train = []
    for fold in trainFolds:
        train.extend(fold)
    test = folds[n]
    
    trainGen = listGenerator(train)
    testGen = listGenerator(test)
    
    
    model = build_model(input_length, line_length, "distcnn", "malware_only")
    
    

    print("Compiling Model and Training, test fold =", n)
    print()







    model.compile(optimizer='rmsprop',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])

    print(model.summary())




    csv_logger = CSVLogger(r".\networks\kfold" + str(n) + r".log")
    filepath = r".\networks\kfold" + str(n) + r"-{epoch:02d}.hdf5"
    checkpoint = ModelCheckpoint(filepath)

    model.fit_generator(trainGen,
                        epochs=epochs,
                        callbacks=[csv_logger, checkpoint],
                        steps_per_epoch=steps_per_epoch, 
                        validation_data=testGen,
                        validation_steps = valid_steps,
    )
              
              





    # C:\altera\13.0\quartus\drivers











