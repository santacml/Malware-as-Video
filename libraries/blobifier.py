import numpy as np


class Blobifier(object):
    def __init__(self):
        self.malwareBlobs = []
        self.benignBlobs = []
        
        self.blobifyX = []
        self.blobifyY = []
        self.blobifyC = []
        
    def blobify(self, filteredInput, label):
        blobs = []
        blob = []
        
        for n in range(0, filteredInput.shape[0]):
            row = filteredInput[n]
            if np.sum(row) > 0:
                blob.append(row)
            else:
                if len(blob) > 0:
                    blobs.append(blob)
                    blob = []
                else:
                    pass
        if blob: blobs.append(blob)
        # print("num blobs", len(blobs), "len file", filteredInput.shape[0])
        blobbed = np.concatenate(blobs, axis=0)
        # print(blobbed.shape)
        while blobbed.shape[0] % 25 != 0:
            blobbed = np.concatenate((blobbed, np.zeros((1, 25))))
        # print(blobbed.shape)
        
        
        # for graphing blob info later on
        self.blobifyX.append(filteredInput.shape[0])
        self.blobifyY.append(blobbed.shape[0] / filteredInput.shape[0])
        self.blobifyC.append(label)
        
        if label:
            self.malwareBlobs.extend(blobs)
        else:
            self.benignBlobs.extend(blobs)
        
        return blobbed